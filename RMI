// save with name of RemoteInterface.java
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface RemoteInterface extends Remote {
    // Declare the methods that can be invoked remotely
    String sayHello() throws RemoteException;
}


//save with name of RemoteImpl.java
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class RemoteImpl extends UnicastRemoteObject implements RemoteInterface {
    public RemoteImpl() throws RemoteException {
        // Constructor must throw RemoteException
    }

    @Override
    public String sayHello() throws RemoteException {
        return "Hello from the server!";
    }
}


//save with name of Server.java
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;

public class Server {
    public static void main(String[] args) {
        try {
            RemoteImpl remoteObj = new RemoteImpl();

            // Create and bind the remote object's stub in the registry
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.bind("RemoteObject", remoteObj);

            System.out.println("Server ready!");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}


//save with name of Client.java
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class Client {
    public static void main(String[] args) {
        try {
            // Get the remote object's stub from the registry
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            RemoteInterface remoteObj = (RemoteInterface) registry.lookup("RemoteObject");

            // Invoke remote method
            String result = remoteObj.sayHello();
            System.out.println("Server response: " + result);
        } catch (Exception e) {
            System.err.println("Client exception: " + e.toString());
            e.printStackTrace();
        }
    }
}


//run 1st command 
javac RemoteInterface.java RemoteImpl.java Server.java Client.java

//2nd command
java Server

//3rd command in seprate terminal
java Client

